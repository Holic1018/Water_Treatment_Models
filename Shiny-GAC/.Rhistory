pi_tot <- solution$par[2]
## perform output calculations ----
output_file <- data_filtered %>%
mutate(
# calculate adsorption densities from single-solute isotherms (gamma_star) (moles chemical / m^2 GAC surface area)
gamma_star = n * pi_tot / R / T_K,
# calculate equilibrium liquid chemical concentrations from single-solute isotherms (c_star) (moles chemical / L water)
c_star_M = (gamma_star * SSA_m2_g / k_f_prime)^(1 / n),
# calculate equilibrium liquid chemical concentrations for competitive system (moles chemical / L water)
c_eq_M = c_tot_M / (1 + ((first(c_tot_M) / c_1_M) - 1) * (first(c_star_M) / c_star_M)),
# calculate adsorption densities (gamma) for competitive system (moles chemical / m^2 GAC surface area)
gamma = (c_tot_M - c_eq_M) / (c_GAC_mg_L / 1000 * SSA_m2_g),
# calculate mole fractions (z) in adsorbed phase for competitive system
z = gamma / sum(gamma),
# calculate surface pressures (pi) for competitive system (Pa m)
pi = gamma / gamma_star * pi_tot,
# calculate equilibrium liquid chemical concentrations for competitive system (mg chemical / L water)
c_eq_mg_L = c_eq_M * mw * 1000,
# calculate equilibrium adsorption densities (q) for competitive system (mg chemical / g GAC)
q_eq_mg_g = gamma * SSA_m2_g * mw * 1000,
# solved first chemical equilibrium liquid concentration (mol chemical / L water)
c_1_M_solved = c_1_M,
# solved total surface pressure (kPa * M)
pi_tot_solved = pi_tot,
# calculated total surface pressure (kPa * M)
pi_tot_calculated = sum(pi),
# convergence code from optim
optim_convergence_code = solution$convergence,
# final error in solution
optim_error = solution$value)
## return output file ----
return(output_file)
}
## function to solve for single chemical isotherm point equilibrium liquid concentration ----
root_solver <- function(k_f, n, c_tot_mg_L, c_GAC_mg_L) {
uniroot(c_eq_solver,
lower = 0, upper = c_tot_mg_L,
tol = 1e-12,
k_f = k_f, n = n, c_tot_mg_L = c_tot_mg_L, c_GAC_mg_L = c_GAC_mg_L)
}
## function to calculate values to find root for single chemical isotherm point ----
c_eq_solver <- function(x, k_f, n, c_tot_mg_L, c_GAC_mg_L) {
x + (c_GAC_mg_L / 1000) * (k_f * x^n) - c_tot_mg_L
}
# read and process experimental conditions and data for all experiments ----
input_file <- read.xlsx(
# read in experimental data from specified Excel file and sheet
file = "IAST_inputs.xlsx",
sheetName = "inputs",
header = TRUE) %>%
## information on data to be read in with examples ----
# experimental conditions
#condition = c(1, 1, 2, 2),
## chemical names
#chemical = rep(c("Benzene", "Toluene"), 2),
## chemical molecular weights (g chemical/mole chemical)
#mw = rep(c(78, 92), 2),
## chemical initial (total) liquid concentrations (mg chemical/L water)
#c_tot_mg_L = rep(c(0.50, 0.82), 2),
## Freundlich isotherm parameters
### c is in mg chemical / L water
### q is in mg chemical / g GAC
#k_f = rep(c(50.1, 76.4), 2),
#n = rep(c(0.533, 0.365), 2),
## GAC parameters
### mass of GAC (mg GAC / L water)
#c_GAC_mg_L = c(100, 100, 218, 218),
### GAC specific surface area (m^2/g)
#SSA_m2_g = 650,
## temperature in Celsius
#T_C = 25,
## universal gas constant (R)
### R is in m^3 kPA/mol K
#R = 8.314e-3,
## initial guess for total surface pressure (kPa * m)
#pi_tot_initial_guess = 2.3e-6) %>%
## perform calculations to get other needed parameters ----
mutate(
### T_K is in K ----
T_K = T_C + 273,
### convert Freundlich parameter to molar units ----
# c is in moles chemical / L water
# q is in moles chemical / g GAC
k_f_prime = k_f * (1 / (mw * 1000))^(1 - n),
### chemical initial (total) liquid concentrations (mole chemical / L water) ----
c_tot_M = c_tot_mg_L / (mw * 1000))
# get surface pressure for each condition ----
## single chemical equilibrium liquid concentrations estimation ----
c_eq_solved <- mapply(FUN = root_solver,
k_f = input_file$k_f,
n = input_file$n,
c_tot_mg_L = input_file$c_tot_mg_L,
c_GAC_mg_L = input_file$c_GAC_mg_L)
## add relevant information to input file ----
input_solution <- input_file %>%
mutate(
# get single chemical equilibrium liquid concentrations (mg chemical / L water)
c_eq_mg_L_single_iso = sapply(seq(1, length(c_eq_solved), 5), function (n) c_eq_solved[[n]][1]),
# GAC loading for single chemical (mg chemical / g GAC)
q_eq_mg_g_single_iso = k_f * c_eq_mg_L_single_iso^n,
# adsorption density (mol / m^2)
gamma_single_iso = q_eq_mg_g_single_iso / (mw * 1000) / SSA_m2_g,
# surface pressure for single chemical (kPa m)
pi_single_iso = R * T_K / n * gamma_single_iso) %>%
# guess for total surface pressure for each condition (kPa m)
# group by experimental condition
group_by(condition) %>%
# calculate the initial guess per logic provided by Benjamin
# should be higher than single solute pressures but less than their sum
mutate(pi_tot_initial_guess = (max(pi_single_iso) + sum(pi_single_iso)) / 2) %>%
# ungroup
ungroup()
# get solutions for all conditions ----
## solve IAST for each experimental condition ----
all_solutions <- Reduce(full_join,
mapply(FUN = multiple_solutions,
condition_filter = unique(input_solution$condition),
MoreArgs = list(data = input_solution),
SIMPLIFY = FALSE)) %>%
# group by condition
group_by(condition) %>%
# calculate % errors in final guessed and calculated values
mutate(
# percent error in first chemical molar concentration (c_1_M)
c_1_M_RPD_error = ((first(c_eq_M) - first(c_1_M_solved)) / mean(first(c_eq_M), first(c_1_M_solved))) * 100,
# percent error in total surface pressure (c_1_M)
pi_tot_RPD_error = ((first(pi_tot_calculated) - first(pi_tot_solved)) / mean(first(pi_tot_calculated), first(pi_tot_solved))) * 100) %>%
# ungroup
ungroup()
# load libraries ----
library(tidyverse)  # set of tools for data manipulation and plotting
library(xlsx)         # allows reading and writing of Excel files
# set random number seed for reproducibility
set.seed(12345)
# load libraries ----
library(tidyverse)  # set of tools for data manipulation and plotting
install.packages(c("cli", "tidyr", "tidyselect", "tidyverse"))
install.packages(c("bayesplot", "BH", "bit", "blob", "broom", "bslib", "cachem", "callr", "car", "checkmate", "cli", "colorspace", "colourpicker", "commonmark", "cpp11", "crayon", "curl", "data.table", "dbplyr", "deSolve", "digest", "distributional", "dplyr", "DT", "dtplyr", "evaluate", "fansi", "farver", "fastmap", "fontawesome", "fs", "gargle", "generics", "ggpubr", "ggrepel", "ggsci", "ggsignif", "googledrive", "googlesheets4", "gtable", "gtools", "haven", "highr", "htmltools", "htmlwidgets", "httpuv", "httr", "igraph", "isoband", "jsonlite", "knitr", "later", "lavaan", "lme4", "loo", "lubridate", "maptools", "markdown", "Matrix", "MatrixModels", "matrixStats", "minqa", "mnormt", "mvtnorm", "OpenMx", "openssl", "orthopolynom", "packrat", "pbkrtest", "pkgbuild", "pkgload", "plotly", "plyr", "posterior", "processx", "ps", "purrr", "quantreg", "Rcpp", "RcppEigen", "RcppParallel", "readxl", "reticulate", "rlang", "rmarkdown", "rsconnect", "rstan", "rstanarm", "rstantools", "rstatix", "rstudioapi", "sass", "scales", "shiny", "sourcetools", "sp", "StanHeaders", "stringi", "sys", "testthat", "tibble", "tidyr", "tinytex", "tzdb", "utf8", "vctrs", "viridisLite", "vroom", "waldo", "xfun", "xml2", "xts", "yaml", "zoo"))
install.packages("rlang")
install.packages("rlang")
install.packages("vctrs")
install.packages("rstan")
# load libraries ----
library(tidyverse)  # set of tools for data manipulation and plotting
library(xlsx)         # allows reading and writing of Excel files
# set random number seed for reproducibility
set.seed(12345)
# define functions ----
## function to solve IAST ----
# solves for (1) first chemical equilibrium liquid concentration (M) and (2) total surface pressure (Pa M)
iast_solution <- function(x, inputs) {
# get guessed values ----
## guessed first chemical equilibrium liquid concentration (mol chemical / L water) ----
c_1_guess_M <- x[1]
## guessed initial total surface pressure (kPa * M) ----
pi_tot_guess <- x[2]
# perform calculations per Benjamin methodology ----
calculations <- inputs %>%
mutate(
# calculate adsorption densities for single-solute isotherm (gamma_star) (moles chemical / m^2 GAC surface area)
gamma_star = n * pi_tot_guess / R / T_K,
# calculate equilibrium liquid chemical concentrations for single-solute isotherm (c_star) (moles chemical / L water)
c_star_M = (gamma_star * SSA_m2_g / k_f_prime)^(1 / n),
# calculate equilibrium liquid chemical concentrations for competitive system (moles chemical / L water)
c_eq_M = c_tot_M / (1 + ((first(c_tot_M) / c_1_guess_M) - 1) * (first(c_star_M) / c_star_M)),
# calculate adsorption densities (gamma) in competitive system (moles chemical / m^2 GAC surface area)
gamma = (c_tot_M - c_eq_M) / (c_GAC_mg_L / 1000 * SSA_m2_g),
# calculate mole fractions (z) in adsorbed phase for competitive system
z = gamma / sum(gamma),
# calculate surface pressures (pi) for competitive system (Pa m)
pi = gamma / gamma_star * pi_tot_guess)
# calculate first chemical liquid equilibrium concentration (moles chemical / L water) ----
c_1_M <- calculations$c_star_M[1] * calculations$z[1]
# calculate total surface pressure (Pa m) ----
pi_tot <- sum(calculations$pi)
# error in first chemical liquid equilibrium concentration and total surface pressure ----
error <- (abs((c_1_guess_M - c_1_M) / (c_1_M)) + abs((pi_tot_guess - pi_tot) / (pi_tot))) * 10^6
# return error value
return(error)
}
## function to send multiple experimental conditions to IAST solver ----
multiple_solutions <- function(condition_filter, data) {
# filter data for experimental condition of interest ----
data_filtered <- data %>%
filter(condition == condition_filter)
# set guessed values ----
## guessed first chemical equilibrium liquid concentration (mole chemical / L water) ----
c_1_guess <- data_filtered$c_tot_M[1] / 2
## guessed total surface pressure (Pa M) ----
pi_tot_guess <- data_filtered$pi_tot_initial_guess[1]
# run optimization to get solution ----
solution <- optim(
## initial guesses ----
par = c(c_1_guess, pi_tot_guess),
## function that solves IAST ----
fn = iast_solution,
## parameter scaling to put estimated parameters on similar basis ----
control = list(parscale = c(c_1_guess / pi_tot_guess, 1)),
## other function variables ----
inputs = data_filtered)
# calculations with solution ----
## solved first chemical equilibrium liquid concentration (mol chemical / L water) ----
c_1_M <- solution$par[1]
## solved total surface pressure guess (kPa * M) ----
pi_tot <- solution$par[2]
## perform output calculations ----
output_file <- data_filtered %>%
mutate(
# calculate adsorption densities from single-solute isotherms (gamma_star) (moles chemical / m^2 GAC surface area)
gamma_star = n * pi_tot / R / T_K,
# calculate equilibrium liquid chemical concentrations from single-solute isotherms (c_star) (moles chemical / L water)
c_star_M = (gamma_star * SSA_m2_g / k_f_prime)^(1 / n),
# calculate equilibrium liquid chemical concentrations for competitive system (moles chemical / L water)
c_eq_M = c_tot_M / (1 + ((first(c_tot_M) / c_1_M) - 1) * (first(c_star_M) / c_star_M)),
# calculate adsorption densities (gamma) for competitive system (moles chemical / m^2 GAC surface area)
gamma = (c_tot_M - c_eq_M) / (c_GAC_mg_L / 1000 * SSA_m2_g),
# calculate mole fractions (z) in adsorbed phase for competitive system
z = gamma / sum(gamma),
# calculate surface pressures (pi) for competitive system (Pa m)
pi = gamma / gamma_star * pi_tot,
# calculate equilibrium liquid chemical concentrations for competitive system (mg chemical / L water)
c_eq_mg_L = c_eq_M * mw * 1000,
# calculate equilibrium adsorption densities (q) for competitive system (mg chemical / g GAC)
q_eq_mg_g = gamma * SSA_m2_g * mw * 1000,
# solved first chemical equilibrium liquid concentration (mol chemical / L water)
c_1_M_solved = c_1_M,
# solved total surface pressure (kPa * M)
pi_tot_solved = pi_tot,
# calculated total surface pressure (kPa * M)
pi_tot_calculated = sum(pi),
# convergence code from optim
optim_convergence_code = solution$convergence,
# final error in solution
optim_error = solution$value)
## return output file ----
return(output_file)
}
## function to solve for single chemical isotherm point equilibrium liquid concentration ----
root_solver <- function(k_f, n, c_tot_mg_L, c_GAC_mg_L) {
uniroot(c_eq_solver,
lower = 0, upper = c_tot_mg_L,
tol = 1e-12,
k_f = k_f, n = n, c_tot_mg_L = c_tot_mg_L, c_GAC_mg_L = c_GAC_mg_L)
}
## function to calculate values to find root for single chemical isotherm point ----
c_eq_solver <- function(x, k_f, n, c_tot_mg_L, c_GAC_mg_L) {
x + (c_GAC_mg_L / 1000) * (k_f * x^n) - c_tot_mg_L
}
# read and process experimental conditions and data for all experiments ----
input_file <- read.xlsx(
# read in experimental data from specified Excel file and sheet
file = "IAST_inputs.xlsx",
sheetName = "inputs",
header = TRUE) %>%
## information on data to be read in with examples ----
# experimental conditions
#condition = c(1, 1, 2, 2),
## chemical names
#chemical = rep(c("Benzene", "Toluene"), 2),
## chemical molecular weights (g chemical/mole chemical)
#mw = rep(c(78, 92), 2),
## chemical initial (total) liquid concentrations (mg chemical/L water)
#c_tot_mg_L = rep(c(0.50, 0.82), 2),
## Freundlich isotherm parameters
### c is in mg chemical / L water
### q is in mg chemical / g GAC
#k_f = rep(c(50.1, 76.4), 2),
#n = rep(c(0.533, 0.365), 2),
## GAC parameters
### mass of GAC (mg GAC / L water)
#c_GAC_mg_L = c(100, 100, 218, 218),
### GAC specific surface area (m^2/g)
#SSA_m2_g = 650,
## temperature in Celsius
#T_C = 25,
## universal gas constant (R)
### R is in m^3 kPA/mol K
#R = 8.314e-3,
## initial guess for total surface pressure (kPa * m)
#pi_tot_initial_guess = 2.3e-6) %>%
## perform calculations to get other needed parameters ----
mutate(
### T_K is in K ----
T_K = T_C + 273,
### convert Freundlich parameter to molar units ----
# c is in moles chemical / L water
# q is in moles chemical / g GAC
k_f_prime = k_f * (1 / (mw * 1000))^(1 - n),
### chemical initial (total) liquid concentrations (mole chemical / L water) ----
c_tot_M = c_tot_mg_L / (mw * 1000))
# get surface pressure for each condition ----
## single chemical equilibrium liquid concentrations estimation ----
c_eq_solved <- mapply(FUN = root_solver,
k_f = input_file$k_f,
n = input_file$n,
c_tot_mg_L = input_file$c_tot_mg_L,
c_GAC_mg_L = input_file$c_GAC_mg_L)
## add relevant information to input file ----
input_solution <- input_file %>%
mutate(
# get single chemical equilibrium liquid concentrations (mg chemical / L water)
c_eq_mg_L_single_iso = sapply(seq(1, length(c_eq_solved), 5), function (n) c_eq_solved[[n]][1]),
# GAC loading for single chemical (mg chemical / g GAC)
q_eq_mg_g_single_iso = k_f * c_eq_mg_L_single_iso^n,
# adsorption density (mol / m^2)
gamma_single_iso = q_eq_mg_g_single_iso / (mw * 1000) / SSA_m2_g,
# surface pressure for single chemical (kPa m)
pi_single_iso = R * T_K / n * gamma_single_iso) %>%
# guess for total surface pressure for each condition (kPa m)
# group by experimental condition
group_by(condition) %>%
# calculate the initial guess per logic provided by Benjamin
# should be higher than single solute pressures but less than their sum
mutate(pi_tot_initial_guess = (max(pi_single_iso) + sum(pi_single_iso)) / 2) %>%
# ungroup
ungroup()
# get solutions for all conditions ----
## solve IAST for each experimental condition ----
all_solutions <- Reduce(full_join,
mapply(FUN = multiple_solutions,
condition_filter = unique(input_solution$condition),
MoreArgs = list(data = input_solution),
SIMPLIFY = FALSE)) %>%
# group by condition
group_by(condition) %>%
# calculate % errors in final guessed and calculated values
mutate(
# percent error in first chemical molar concentration (c_1_M)
c_1_M_RPD_error = ((first(c_eq_M) - first(c_1_M_solved)) / mean(first(c_eq_M), first(c_1_M_solved))) * 100,
# percent error in total surface pressure (c_1_M)
pi_tot_RPD_error = ((first(pi_tot_calculated) - first(pi_tot_solved)) / mean(first(pi_tot_calculated), first(pi_tot_solved))) * 100) %>%
# ungroup
ungroup()
library(shiny); runApp('C:/Users/jburkhar/OneDrive - Environmental Protection Agency (EPA)/Profile/Desktop/Git/Water_Treatment_Models/ShinyApp/HSDM_IX.R')
install.packages(c("htmltools", "plotly"))
library(shiny); runApp('C:/Users/jburkhar/OneDrive - Environmental Protection Agency (EPA)/Profile/Desktop/Git/Water_Treatment_Models/ShinyApp/HSDM_IX.R')
install.packages(c("broom", "bslib", "cachem", "checkmate", "cli", "curl", "dbplyr", "deSolve", "digest", "DT", "fastmap", "fs", "gargle", "googledrive", "googlesheets4", "haven", "htmltools", "httpuv", "igraph", "jsonlite", "later", "lme4", "lubridate", "maptools", "Matrix", "MatrixModels", "matrixStats", "mvtnorm", "pkgbuild", "pkgload", "plotly", "processx", "Rcpp", "RcppParallel", "readxl", "reticulate", "rlang", "rstan", "sass", "shiny", "sp", "StanHeaders", "sys", "testthat", "tzdb", "vctrs", "vroom", "xml2"))
library(shiny); runApp('C:/Users/jburkhar/OneDrive - Environmental Protection Agency (EPA)/Profile/Desktop/Git/Water_Treatment_Models/ShinyApp/HSDM_IX.R')
runApp('C:/Users/jburkhar/OneDrive - Environmental Protection Agency (EPA)/Profile/Desktop/Git/Water_Treatment_Models/ShinyApp/HSDM_IX.R')
runApp('C:/Users/jburkhar/OneDrive - Environmental Protection Agency (EPA)/Profile/Desktop/Git/Water_Treatment_Models/ShinyApp/HSDM_IX.R')
library(shiny); runApp('C:/Users/jburkhar/OneDrive - Environmental Protection Agency (EPA)/Profile/Desktop/Git/Water_Treatment_Models/ShinyApp/hsdmix2.r')
library(shiny); runApp('C:/Users/jburkhar/OneDrive - Environmental Protection Agency (EPA)/Profile/Desktop/Git/Water_Treatment_Models/ShinyApp/hsdmix2.r')
library(shiny); runApp('C:/Users/jburkhar/OneDrive - Environmental Protection Agency (EPA)/Profile/Desktop/hsdmix_r/hsdmix3.r')
runApp('C:/Users/jburkhar/OneDrive - Environmental Protection Agency (EPA)/Profile/Desktop/hsdmix_r/hsdmix3.r')
library(shiny); runApp('C:/Users/jburkhar/OneDrive - Environmental Protection Agency (EPA)/Profile/Desktop/hsdmix_r/hsdmix3.r')
library("reticulate")
install.packages("reticulate")
library("reticulate")
library(shiny); runApp('C:/Users/jburkhar/OneDrive - Environmental Protection Agency (EPA)/Profile/Desktop/hsdmix_r/hsdmix3.r')
library(shiny); runApp('C:/Users/jburkhar/OneDrive - Environmental Protection Agency (EPA)/Profile/Desktop/hsdmix_r/hsdmix3.r')
library(shiny); runApp('C:/Users/jburkhar/OneDrive - Environmental Protection Agency (EPA)/Profile/Desktop/hsdmix_r/hsdmix3.r')
library(shiny); runApp('C:/Users/jburkhar/OneDrive - Environmental Protection Agency (EPA)/Profile/Desktop/hsdmix_r/hsdmix3.r')
library(shiny); runApp('C:/Users/jburkhar/OneDrive - Environmental Protection Agency (EPA)/Profile/Desktop/hsdmix_r/hsdmix3.r')
library(shiny); runApp('C:/Users/jburkhar/OneDrive - Environmental Protection Agency (EPA)/Profile/Desktop/hsdmix_r/hsdmix3.r')
library(shiny); runApp('C:/Users/jburkhar/OneDrive - Environmental Protection Agency (EPA)/Profile/Desktop/hsdmix_r/hsdmix3.r')
library(shiny); runApp('C:/Users/jburkhar/OneDrive - Environmental Protection Agency (EPA)/Profile/Desktop/Git/R_HSDMIX/IEX_10-12-23/HSDM_IX.R')
runApp('C:/Users/jburkhar/OneDrive - Environmental Protection Agency (EPA)/Profile/Desktop/Git/R_HSDMIX/IEX_10-12-23/HSDM_IX.R')
library(shiny); runApp('C:/Users/jburkhar/OneDrive - Environmental Protection Agency (EPA)/Profile/Desktop/Git/R_HSDMIX/IEX_10-12-23/HSDM_IX.R')
shiny::runApp('C:/Users/jburkhar/OneDrive - Environmental Protection Agency (EPA)/Profile/Desktop/Git/DavesApp')
library(shiny); runApp('C:/Users/jburkhar/OneDrive - Environmental Protection Agency (EPA)/Profile/Desktop/Git/R_HSDMIX/IEX_10-20-23/HSDM_IX.R')
runApp('C:/Users/jburkhar/OneDrive - Environmental Protection Agency (EPA)/Profile/Desktop/Git/R_HSDMIX/IEX_10-20-23/HSDM_IX.R')
runApp('C:/Users/jburkhar/OneDrive - Environmental Protection Agency (EPA)/Profile/Desktop/Git/R_HSDMIX/IEX_10-20-23/HSDM_IX.R')
runApp('C:/Users/jburkhar/OneDrive - Environmental Protection Agency (EPA)/Profile/Desktop/Git/R_HSDMIX/IEX_10-20-23/HSDM_IX.R')
runApp('C:/Users/jburkhar/OneDrive - Environmental Protection Agency (EPA)/Profile/Desktop/Git/R_HSDMIX/IEX_10-20-23/HSDM_IX.R')
runApp('C:/Users/jburkhar/OneDrive - Environmental Protection Agency (EPA)/Profile/Desktop/Git/R_HSDMIX/IEX_10-20-23/HSDM_IX.R')
library(shiny); runApp('C:/Users/jburkhar/OneDrive - Environmental Protection Agency (EPA)/Profile/Desktop/Git/R_HSDMIX/10-25-23_IEX/HSDM_IX.R')
runApp('C:/Users/jburkhar/OneDrive - Environmental Protection Agency (EPA)/Profile/Desktop/Git/R_HSDMIX/10-25-23_IEX/HSDM_IX.R')
runApp('C:/Users/jburkhar/OneDrive - Environmental Protection Agency (EPA)/Profile/Desktop/Git/R_HSDMIX/10-25-23_IEX/HSDM_IX.R')
library(shiny); runApp('C:/Users/jburkhar/OneDrive - Environmental Protection Agency (EPA)/Profile/Desktop/Git/R_HSDMIX/10-25-23_IEX/HSDM_IX.R')
library(shiny); runApp('C:/Users/jburkhar/OneDrive - Environmental Protection Agency (EPA)/Profile/Desktop/Git/R_HSDMIX/10-25-23_IEX/HSDM_IX.R')
runApp('C:/Users/jburkhar/OneDrive - Environmental Protection Agency (EPA)/Profile/Desktop/Git/R_HSDMIX/10-25-23_IEX/HSDM_IX.R')
library(shiny); runApp('C:/Users/jburkhar/OneDrive - Environmental Protection Agency (EPA)/Profile/Desktop/Git/R_HSDMIX/10-31-23_IEX/HSDM_IX.R')
runApp('C:/Users/jburkhar/OneDrive - Environmental Protection Agency (EPA)/Profile/Desktop/Git/R_HSDMIX/10-31-23_IEX/HSDM_IX.R')
library(shiny); runApp('C:/Users/jburkhar/OneDrive - Environmental Protection Agency (EPA)/Profile/Desktop/Git/R_HSDMIX/10-31-23_IEX/HSDM_IX.R')
library(shiny); runApp('C:/Users/jburkhar/OneDrive - Environmental Protection Agency (EPA)/Profile/Desktop/Git/R_HSDMIX/10-31-23_IEX/HSDM_IX.R')
runApp('C:/Users/jburkhar/OneDrive - Environmental Protection Agency (EPA)/Profile/Desktop/Git/R_HSDMIX/10-31-23_IEX/HSDM_IX.R')
runApp('C:/Users/jburkhar/OneDrive - Environmental Protection Agency (EPA)/Profile/Desktop/Git/R_HSDMIX/10-31-23_IEX/HSDM_IX.R')
runApp('C:/Users/jburkhar/OneDrive - Environmental Protection Agency (EPA)/Profile/Desktop/Git/R_HSDMIX/10-31-23_IEX/HSDM_IX.R')
runApp('C:/Users/jburkhar/OneDrive - Environmental Protection Agency (EPA)/Profile/Desktop/Git/R_HSDMIX/10-31-23_IEX/HSDM_IX.R')
runApp('C:/Users/jburkhar/OneDrive - Environmental Protection Agency (EPA)/Profile/Desktop/Git/R_HSDMIX/10-31-23_IEX/HSDM_IX.R')
library(shiny); runApp('C:/Users/jburkhar/OneDrive - Environmental Protection Agency (EPA)/Profile/Desktop/Git/R_HSDMIX/10-31-23_IEX/HSDM_IX.R')
library(shiny); runApp('C:/Users/jburkhar/OneDrive - Environmental Protection Agency (EPA)/Profile/Desktop/Git/R_HSDMIX/10-31-23_IEX/HSDM_IX.R')
library(shiny); runApp('C:/Users/jburkhar/OneDrive - Environmental Protection Agency (EPA)/Profile/Desktop/Git/R_HSDMIX/10-31-23_IEX/HSDM_IX.R')
library(shiny); runApp('C:/Users/jburkhar/OneDrive - Environmental Protection Agency (EPA)/Profile/Desktop/Git/R_HSDMIX/10-31-23_IEX/HSDM_IX.R')
install.packages(c("askpass", "bslib", "checkmate", "cpp11", "curl", "dbplyr", "deSolve", "dplyr", "evaluate", "fansi", "fontawesome", "fs", "gargle", "ggplot2", "gtable", "htmltools", "httpuv", "httr", "knitr", "labeling", "lifecycle", "lubridate", "matrixStats", "openssl", "plotly", "prettyunits", "promises", "purrr", "ragg", "RcppEigen", "rematch", "reticulate", "rlang", "rmarkdown", "rprojroot", "rstan", "sass", "shiny", "shinyWidgets", "StanHeaders", "stringi", "systemfonts", "textshaping", "tinytex", "utf8", "uuid", "vctrs", "vroom", "withr", "xfun"))
install.packages(c("askpass", "bslib", "checkmate", "cpp11", "curl", "dbplyr", "deSolve", "dplyr", "evaluate", "fansi", "fontawesome", "fs", "gargle", "ggplot2", "gtable", "htmltools", "httpuv", "httr", "knitr", "labeling", "lifecycle", "lubridate", "matrixStats", "openssl", "plotly", "prettyunits", "promises", "purrr", "ragg", "RcppEigen", "rematch", "reticulate", "rlang", "rmarkdown", "rprojroot", "rstan", "sass", "shiny", "shinyWidgets", "StanHeaders", "stringi", "systemfonts", "textshaping", "tinytex", "utf8", "uuid", "vctrs", "vroom", "withr", "xfun"))
install.packages(c("askpass", "bslib", "checkmate", "cpp11", "curl", "dbplyr", "deSolve", "dplyr", "evaluate", "fansi", "fontawesome", "fs", "gargle", "ggplot2", "gtable", "htmltools", "httpuv", "httr", "knitr", "labeling", "lifecycle", "lubridate", "matrixStats", "openssl", "plotly", "prettyunits", "promises", "purrr", "ragg", "RcppEigen", "rematch", "reticulate", "rlang", "rmarkdown", "rprojroot", "rstan", "sass", "shiny", "shinyWidgets", "StanHeaders", "stringi", "systemfonts", "textshaping", "tinytex", "utf8", "uuid", "vctrs", "vroom", "withr", "xfun"))
install.packages(c("askpass", "bslib", "checkmate", "cpp11", "curl", "dbplyr", "deSolve", "dplyr", "evaluate", "fansi", "fontawesome", "fs", "gargle", "ggplot2", "gtable", "htmltools", "httpuv", "httr", "knitr", "labeling", "lifecycle", "lubridate", "matrixStats", "openssl", "plotly", "prettyunits", "promises", "purrr", "ragg", "RcppEigen", "rematch", "reticulate", "rlang", "rmarkdown", "rprojroot", "rstan", "sass", "shiny", "shinyWidgets", "StanHeaders", "stringi", "systemfonts", "textshaping", "tinytex", "utf8", "uuid", "vctrs", "vroom", "withr", "xfun"))
library(shiny); runApp('C:/Users/jburkhar/OneDrive - Environmental Protection Agency (EPA)/Profile/Desktop/Git/Water_Treatment_Models/ShinyApp/HSDM_IX.R')
library(shiny); runApp('C:/Users/jburkhar/OneDrive - Environmental Protection Agency (EPA)/Profile/Desktop/Git/Water_Treatment_Models/ShinyApp/HSDM_IX.R')
runApp('C:/Users/jburkhar/OneDrive - Environmental Protection Agency (EPA)/Profile/Desktop/Git/Water_Treatment_Models/ShinyApp/HSDM_IX.R')
runApp('C:/Users/jburkhar/OneDrive - Environmental Protection Agency (EPA)/Profile/Desktop/Git/Water_Treatment_Models/ShinyApp/HSDM_IX.R')
library(shiny); runApp('C:/Users/jburkhar/OneDrive - Environmental Protection Agency (EPA)/Profile/Desktop/Git/Water_Treatment_Models/ShinyApp/HSDM_IX.R')
runApp('C:/Users/jburkhar/OneDrive - Environmental Protection Agency (EPA)/Profile/Desktop/Git/Water_Treatment_Models/ShinyApp/HSDM_IX.R')
runApp('C:/Users/jburkhar/OneDrive - Environmental Protection Agency (EPA)/Profile/Desktop/Git/Water_Treatment_Models/ShinyApp/HSDM_IX.R')
runApp('C:/Users/jburkhar/OneDrive - Environmental Protection Agency (EPA)/Profile/Desktop/Git/Water_Treatment_Models/ShinyApp/HSDM_IX.R')
runApp('C:/Users/jburkhar/OneDrive - Environmental Protection Agency (EPA)/Profile/Desktop/Git/Water_Treatment_Models/ShinyApp/HSDM_IX.R')
runApp('C:/Users/jburkhar/OneDrive - Environmental Protection Agency (EPA)/Profile/Desktop/Git/Water_Treatment_Models/ShinyApp/HSDM_IX.R')
runApp('C:/Users/jburkhar/OneDrive - Environmental Protection Agency (EPA)/Profile/Desktop/Git/Water_Treatment_Models/ShinyApp/HSDM_IX.R')
runApp('C:/Users/jburkhar/OneDrive - Environmental Protection Agency (EPA)/Profile/Desktop/Git/Water_Treatment_Models/ShinyApp/HSDM_IX.R')
runApp('C:/Users/jburkhar/OneDrive - Environmental Protection Agency (EPA)/Profile/Desktop/Git/Water_Treatment_Models/ShinyApp/HSDM_IX.R')
library(shiny); runApp('C:/Users/jburkhar/OneDrive - Environmental Protection Agency (EPA)/Profile/Desktop/Git/R_HSDMIX/dec2023/HSDM_IX.R')
library(shiny); runApp('C:/Users/jburkhar/OneDrive - Environmental Protection Agency (EPA)/Profile/Desktop/Git/R_HSDMIX/dec2023/HSDM_IX.R')
library(shiny); runApp('C:/Users/jburkhar/OneDrive - Environmental Protection Agency (EPA)/Profile/Desktop/Git/R_HSDMIX/dec2023/HSDM_IX.R')
runApp('C:/Users/jburkhar/OneDrive - Environmental Protection Agency (EPA)/Profile/Desktop/Git/R_HSDMIX/dec2023/HSDM_IX.R')
runApp('C:/Users/jburkhar/OneDrive - Environmental Protection Agency (EPA)/Profile/Desktop/Git/R_HSDMIX/dec2023/HSDM_IX.R')
library(shiny); runApp('C:/Users/jburkhar/OneDrive - Environmental Protection Agency (EPA)/Profile/Desktop/Git/R_HSDMIX/dec2023/HSDM_IX.R')
library(shiny); runApp('C:/Users/jburkhar/OneDrive - Environmental Protection Agency (EPA)/Profile/Desktop/Git/R_HSDMIX/dec2023/HSDM_IX.R')
runApp('C:/Users/jburkhar/OneDrive - Environmental Protection Agency (EPA)/Profile/Desktop/Git/R_HSDMIX/dec2023/HSDM_IX.R')
library(shiny); runApp('C:/Users/jburkhar/OneDrive - Environmental Protection Agency (EPA)/Profile/Desktop/Git/R_HSDMIX/dec2023/HSDM_IX.R')
library(shiny); runApp('C:/Users/jburkhar/OneDrive - Environmental Protection Agency (EPA)/Profile/Desktop/Git/R_HSDMIX/dec2023/HSDM_IX.R')
library(shiny); runApp('C:/Users/jburkhar/OneDrive - Environmental Protection Agency (EPA)/Profile/Desktop/Git/Water_Treatment_Models/ShinyApp/Ion_Exchange_Model.R')
library(shiny); runApp('C:/Users/jburkhar/OneDrive - Environmental Protection Agency (EPA)/Profile/Desktop/Git/Water_Treatment_Models/ShinyApp/Ion_Exchange_Model.R')
library(shiny); runApp('C:/Users/jburkhar/OneDrive - Environmental Protection Agency (EPA)/Profile/Desktop/Git/Water_Treatment_Models/ShinyApp/Ion_Exchange_Model.R')
library(shiny); runApp('C:/Users/jburkhar/OneDrive - Environmental Protection Agency (EPA)/Profile/Desktop/Git/Water_Treatment_Models/ShinyApp/Ion_Exchange_Model.R')
runApp('C:/Users/jburkhar/OneDrive - Environmental Protection Agency (EPA)/Profile/Desktop/Git/Water_Treatment_Models/ShinyApp/Ion_Exchange_Model.R')
install.packages("rJava")
runApp('C:/Users/jburkhar/OneDrive - Environmental Protection Agency (EPA)/Profile/Desktop/Git/Water_Treatment_Models/ShinyApp/Ion_Exchange_Model.R')
library(shiny); runApp('C:/Users/jburkhar/OneDrive - Environmental Protection Agency (EPA)/Profile/Desktop/Git/Water_Treatment_Models/ShinyApp/Ion_Exchange_Model.R')
install.packages("rJava")
runApp('C:/Users/jburkhar/OneDrive - Environmental Protection Agency (EPA)/Profile/Desktop/Git/Water_Treatment_Models/ShinyApp/Ion_Exchange_Model.R')
install.packages("xslx")
runApp('C:/Users/jburkhar/OneDrive - Environmental Protection Agency (EPA)/Profile/Desktop/Git/Water_Treatment_Models/ShinyApp/Ion_Exchange_Model.R')
library(shiny); runApp('C:/Users/jburkhar/OneDrive - Environmental Protection Agency (EPA)/Profile/Downloads/IEX_2-20-24/IEX_2-20-24/Ion_Exchange_Model.R')
runApp('C:/Users/jburkhar/OneDrive - Environmental Protection Agency (EPA)/Profile/Downloads/IEX_2-20-24/IEX_2-20-24/Ion_Exchange_Model.R')
library(shiny); runApp('C:/Users/jburkhar/OneDrive - Environmental Protection Agency (EPA)/Profile/Downloads/IEX_2-20-24/IEX_2-20-24/Ion_Exchange_Model.R')
runApp('C:/Users/jburkhar/OneDrive - Environmental Protection Agency (EPA)/Profile/Downloads/IEX_2-20-24/IEX_2-20-24/Ion_Exchange_Model.R')
library(shiny); runApp('C:/Users/jburkhar/OneDrive - Environmental Protection Agency (EPA)/Profile/Downloads/IEX_2-20-24/IEX_2-20-24/Ion_Exchange_Model.R')
library(shiny); runApp('D:/SHINY_APP/Water_Treatment_Models-master/ShinyApp/Ion_Exchange_Model_new.R')
library(shiny); runApp('C:/Users/jburkhar/OneDrive - Environmental Protection Agency (EPA)/Profile/Desktop/Git/Water_Treatment_Models/ShinyApp/Ion_Exchange_Model.R')
runApp('C:/Users/jburkhar/OneDrive - Environmental Protection Agency (EPA)/Profile/Desktop/Git/Water_Treatment_Models/ShinyApp/Ion_Exchange_Model.R')
runApp('C:/Users/jburkhar/OneDrive - Environmental Protection Agency (EPA)/Profile/Desktop/Git/Water_Treatment_Models/ShinyApp/Ion_Exchange_Model.R')
library(shiny); runApp('C:/Users/jburkhar/OneDrive - Environmental Protection Agency (EPA)/Profile/Desktop/Git/GAC_Shiny/3-26-24_GAC/GACapp.R')
library(shiny); runApp('C:/Users/jburkhar/OneDrive - Environmental Protection Agency (EPA)/Profile/Desktop/Git/GAC_Shiny/3-26-24_GAC/GACapp.R')
library(shiny); runApp('C:/Users/jburkhar/OneDrive - Environmental Protection Agency (EPA)/Profile/Desktop/Git/Water_Treatment_Models/ShinyApp/Ion_Exchange_Model.R')
runApp('C:/Users/jburkhar/OneDrive - Environmental Protection Agency (EPA)/Profile/Desktop/Git/Water_Treatment_Models/ShinyApp/Ion_Exchange_Model.R')
runApp('C:/Users/jburkhar/OneDrive - Environmental Protection Agency (EPA)/Profile/Desktop/Git/Water_Treatment_Models/ShinyApp/Ion_Exchange_Model.R')
library(shiny); runApp('C:/Users/jburkhar/OneDrive - Environmental Protection Agency (EPA)/Profile/Desktop/Git/Water_Treatment_Models/ShinyApp/Ion_Exchange_Model.R')
library(shiny); runApp('C:/Users/jburkhar/OneDrive - Environmental Protection Agency (EPA)/Profile/Desktop/Git/Water_Treatment_Models/ShinyApp/Ion_Exchange_Model.R')
library(shiny); runApp('C:/Users/jburkhar/OneDrive - Environmental Protection Agency (EPA)/Profile/Desktop/Git/Water_Treatment_Models/ShinyApp/Ion_Exchange_Model.R')
library(shiny); runApp('C:/Users/jburkhar/OneDrive - Environmental Protection Agency (EPA)/Profile/Desktop/Git/GAC_Shiny/4-15-24_GAC/GACapp.R')
runApp('C:/Users/jburkhar/OneDrive - Environmental Protection Agency (EPA)/Profile/Desktop/Git/GAC_Shiny/4-15-24_GAC/GACapp.R')
runApp('C:/Users/jburkhar/OneDrive - Environmental Protection Agency (EPA)/Profile/Desktop/Git/GAC_Shiny/4-15-24_GAC/GACapp.R')
runApp('C:/Users/jburkhar/OneDrive - Environmental Protection Agency (EPA)/Profile/Desktop/Git/GAC_Shiny/4-15-24_GAC/GACapp.R')
runApp('C:/Users/jburkhar/OneDrive - Environmental Protection Agency (EPA)/Profile/Desktop/Git/GAC_Shiny/4-15-24_GAC/GACapp.R')
runApp('C:/Users/jburkhar/OneDrive - Environmental Protection Agency (EPA)/Profile/Desktop/Git/GAC_Shiny/4-15-24_GAC/GACapp.R')
runApp('C:/Users/jburkhar/OneDrive - Environmental Protection Agency (EPA)/Profile/Desktop/Git/GAC_Shiny/4-15-24_GAC/GACapp.R')
runApp('C:/Users/jburkhar/OneDrive - Environmental Protection Agency (EPA)/Profile/Desktop/Git/GAC_Shiny/4-15-24_GAC/GACapp.R')
runApp('C:/Users/jburkhar/OneDrive - Environmental Protection Agency (EPA)/Profile/Desktop/Git/GAC_Shiny/4-15-24_GAC/GACapp.R')
runApp('C:/Users/jburkhar/OneDrive - Environmental Protection Agency (EPA)/Profile/Desktop/Git/GAC_Shiny/4-15-24_GAC/GACapp.R')
runApp('C:/Users/jburkhar/OneDrive - Environmental Protection Agency (EPA)/Profile/Desktop/Git/GAC_Shiny/4-15-24_GAC/GACapp.R')
runApp('C:/Users/jburkhar/OneDrive - Environmental Protection Agency (EPA)/Profile/Desktop/Git/GAC_Shiny/4-15-24_GAC/GACapp.R')
runApp('C:/Users/jburkhar/OneDrive - Environmental Protection Agency (EPA)/Profile/Desktop/Git/GAC_Shiny/4-15-24_GAC/GACapp.R')
runApp('C:/Users/jburkhar/OneDrive - Environmental Protection Agency (EPA)/Profile/Desktop/Git/GAC_Shiny/4-15-24_GAC/GACapp.R')
runApp('C:/Users/jburkhar/OneDrive - Environmental Protection Agency (EPA)/Profile/Desktop/Git/GAC_Shiny/4-15-24_GAC/GACapp.R')
reticulate::source_python('C:/Users/jburkhar/OneDrive - Environmental Protection Agency (EPA)/Profile/Desktop/Git/GAC_Shiny/4-15-24_GAC/GAC_Shiny_helper.py')
runApp('C:/Users/jburkhar/OneDrive - Environmental Protection Agency (EPA)/Profile/Desktop/Git/GAC_Shiny/4-15-24_GAC/GACapp.R')
runApp('C:/Users/jburkhar/OneDrive - Environmental Protection Agency (EPA)/Profile/Desktop/Git/GAC_Shiny/4-15-24_GAC/GACapp.R')
runApp('C:/Users/jburkhar/OneDrive - Environmental Protection Agency (EPA)/Profile/Desktop/Git/GAC_Shiny/4-15-24_GAC/GACapp.R')
runApp('C:/Users/jburkhar/OneDrive - Environmental Protection Agency (EPA)/Profile/Desktop/Git/GAC_Shiny/4-15-24_GAC/GACapp.R')
runApp('C:/Users/jburkhar/OneDrive - Environmental Protection Agency (EPA)/Profile/Desktop/Git/GAC_Shiny/4-15-24_GAC/GACapp.R')
reticulate::repl_python()
exit()
exit
runApp('C:/Users/jburkhar/OneDrive - Environmental Protection Agency (EPA)/Profile/Desktop/Git/GAC_Shiny/4-15-24_GAC/GACapp.R')
library(shiny); runApp('C:/Users/jburkhar/OneDrive - Environmental Protection Agency (EPA)/Profile/Desktop/Git/GAC_Shiny/4-15-24_GAC/GACapp.R')
runApp('C:/Users/jburkhar/OneDrive - Environmental Protection Agency (EPA)/Profile/Desktop/Git/GAC_Shiny/4-15-24_GAC/GACapp.R')
runApp('C:/Users/jburkhar/OneDrive - Environmental Protection Agency (EPA)/Profile/Desktop/Git/GAC_Shiny/4-15-24_GAC/GACapp.R')
runApp('C:/Users/jburkhar/OneDrive - Environmental Protection Agency (EPA)/Profile/Desktop/Git/GAC_Shiny/4-15-24_GAC/GACapp.R')
runApp('C:/Users/jburkhar/OneDrive - Environmental Protection Agency (EPA)/Profile/Desktop/Git/GAC_Shiny/4-15-24_GAC/GACapp.R')
runApp('C:/Users/jburkhar/OneDrive - Environmental Protection Agency (EPA)/Profile/Desktop/Git/GAC_Shiny/4-15-24_GAC/GACapp.R')
runApp('C:/Users/jburkhar/OneDrive - Environmental Protection Agency (EPA)/Profile/Desktop/Git/GAC_Shiny/4-15-24_GAC/GACapp.R')
runApp('C:/Users/jburkhar/OneDrive - Environmental Protection Agency (EPA)/Profile/Desktop/Git/GAC_Shiny/4-15-24_GAC/GACapp.R')
runApp('C:/Users/jburkhar/OneDrive - Environmental Protection Agency (EPA)/Profile/Desktop/Git/GAC_Shiny/4-15-24_GAC/GACapp.R')
runApp('C:/Users/jburkhar/OneDrive - Environmental Protection Agency (EPA)/Profile/Desktop/Git/GAC_Shiny/4-15-24_GAC/GACapp.R')
runApp('C:/Users/jburkhar/OneDrive - Environmental Protection Agency (EPA)/Profile/Desktop/Git/GAC_Shiny/4-15-24_GAC/GACapp.R')
runApp('C:/Users/jburkhar/OneDrive - Environmental Protection Agency (EPA)/Profile/Desktop/Git/GAC_Shiny/4-15-24_GAC/GACapp.R')
runApp('C:/Users/jburkhar/OneDrive - Environmental Protection Agency (EPA)/Profile/Desktop/Git/GAC_Shiny/4-15-24_GAC/GACapp.R')
runApp('C:/Users/jburkhar/OneDrive - Environmental Protection Agency (EPA)/Profile/Desktop/Git/GAC_Shiny/4-15-24_GAC/GACapp.R')
runApp('C:/Users/jburkhar/OneDrive - Environmental Protection Agency (EPA)/Profile/Desktop/Git/GAC_Shiny/4-15-24_GAC/GACapp.R')
library(shiny); runApp('C:/Users/jburkhar/OneDrive - Environmental Protection Agency (EPA)/Profile/Desktop/Git/Water_Treatment_Models/ShinyApp/Ion_Exchange_Model.R')
runApp('C:/Users/jburkhar/OneDrive - Environmental Protection Agency (EPA)/Profile/Desktop/Git/GAC_Shiny/4-15-24_GAC/GACapp.R')
runApp('C:/Users/jburkhar/OneDrive - Environmental Protection Agency (EPA)/Profile/Desktop/Git/GAC_Shiny/4-15-24_GAC/GACapp.R')
library(shiny); runApp('C:/Users/jburkhar/OneDrive - Environmental Protection Agency (EPA)/Profile/Desktop/Git/GAC_Shiny/4-25-24/GACapp.R')
library(shiny); runApp('C:/Users/jburkhar/OneDrive - Environmental Protection Agency (EPA)/Profile/Desktop/Git/GAC_Shiny/4-25-24/GACapp.R')
library(shiny); runApp('C:/Users/jburkhar/OneDrive - Environmental Protection Agency (EPA)/Profile/Desktop/Git/Water_Treatment_Models/ShinyApp/Ion_Exchange_Model.R')
install.packages("readxl")
install.packages("reticulate")
install.packages("rstan")
library(shiny); runApp('C:/Users/jburkhar/OneDrive - Environmental Protection Agency (EPA)/Profile/Desktop/Git/Water_Treatment_Models/ShinyApp/Ion_Exchange_Model.R')
runApp('C:/Users/jburkhar/OneDrive - Environmental Protection Agency (EPA)/Profile/Desktop/Git/GAC_Shiny/4-25-24/GACapp.R')
library(shiny); runApp('C:/Users/jburkhar/OneDrive - Environmental Protection Agency (EPA)/Profile/Desktop/Git/Water_Treatment_Models/ShinyApp/Ion_Exchange_Model.R')
runApp('C:/Users/jburkhar/OneDrive - Environmental Protection Agency (EPA)/Profile/Desktop/Git/Water_Treatment_Models/ShinyApp/Ion_Exchange_Model.R')
library(shiny); runApp('C:/Users/jburkhar/OneDrive - Environmental Protection Agency (EPA)/Profile/Desktop/Git/Water_Treatment_Models/ShinyApp/Ion_Exchange_Model.R')
library(shiny); runApp('C:/Users/jburkhar/OneDrive - Environmental Protection Agency (EPA)/Profile/Desktop/Git/Water_Treatment_Models/ShinyApp/Ion_Exchange_Model.R')
library(shiny); runApp('C:/Users/jburkhar/OneDrive - Environmental Protection Agency (EPA)/Profile/Desktop/Git/GAC_Shiny/4-25-24/GACapp.R')
runApp('C:/Users/jburkhar/OneDrive - Environmental Protection Agency (EPA)/Profile/Desktop/Git/GAC_Shiny/4-25-24/GACapp.R')
runApp('C:/Users/jburkhar/OneDrive - Environmental Protection Agency (EPA)/Profile/Desktop/Git/GAC_Shiny/4-25-24/GACapp.R')
library(shiny); runApp('C:/Users/jburkhar/OneDrive - Environmental Protection Agency (EPA)/Profile/Desktop/Git/GAC_Shiny/4-25-24/GACapp.R')
library(shiny); runApp('C:/Users/jburkhar/OneDrive - Environmental Protection Agency (EPA)/Profile/Desktop/Git/GAC_Shiny/4-25-24/GACapp.R')
library(shiny); runApp('C:/Users/jburkhar/OneDrive - Environmental Protection Agency (EPA)/Profile/Desktop/Git/Water_Treatment_Models/ShinyApp/Ion_Exchange_Model.R')
library(shiny); runApp('C:/Users/jburkhar/OneDrive - Environmental Protection Agency (EPA)/Profile/Desktop/Git/Water_Treatment_Models/ShinyApp/Ion_Exchange_Model.R')
runApp('C:/Users/jburkhar/OneDrive - Environmental Protection Agency (EPA)/Profile/Desktop/Git/Water_Treatment_Models/ShinyApp/Ion_Exchange_Model.R')
library(shiny); runApp('C:/Users/jburkhar/OneDrive - Environmental Protection Agency (EPA)/Profile/Desktop/Git/GAC_Shiny/4-25-24/GACapp.R')
install.packages(c("backports", "broom", "cachem", "cli", "crayon", "DBI", "digest", "evaluate", "farver", "fastmap", "highr", "knitr", "loo", "openssl", "posterior", "ps", "QuickJSR", "ragg", "RcppParallel", "reprex", "reticulate", "rlang", "rmarkdown", "StanHeaders", "stringi", "systemfonts", "textshaping", "tinytex", "xfun", "yaml"))
library(shiny); runApp('C:/Users/jburkhar/OneDrive - Environmental Protection Agency (EPA)/Profile/Desktop/Git/Water_Treatment_Models/Shiny-IEX/Ion_Exchange_Model.R')
runApp('C:/Users/jburkhar/OneDrive - Environmental Protection Agency (EPA)/Profile/Desktop/Git/Water_Treatment_Models/Shiny-IEX/Ion_Exchange_Model.R')
library(shiny); runApp('C:/Users/jburkhar/OneDrive - Environmental Protection Agency (EPA)/Profile/Desktop/Git/Water_Treatment_Models/Shiny-GAC/GACapp.R')
library(shiny); runApp('C:/Users/jburkhar/OneDrive - Environmental Protection Agency (EPA)/Profile/Desktop/Git/Water_Treatment_Models/Shiny-GAC/GACapp.R')
library(shiny); runApp('C:/Users/jburkhar/OneDrive - Environmental Protection Agency (EPA)/Profile/Desktop/Git/Water_Treatment_Models/Shiny-GAC/GACapp.R')
library(shiny); runApp('C:/Users/jburkhar/OneDrive - Environmental Protection Agency (EPA)/Profile/Desktop/Git/Water_Treatment_Models/Shiny-GAC/GACapp.R')
library(shiny); runApp('C:/Users/jburkhar/OneDrive - Environmental Protection Agency (EPA)/Profile/Desktop/Git/Water_Treatment_Models/Shiny-GAC/GACapp.R')
